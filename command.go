package graphql

import (
	"io/ioutil"
	"log"
	"os"
	"reflect"
	"strings"

	"github.com/99designs/gqlgen/api"
	"github.com/99designs/gqlgen/codegen/config"
	"github.com/spf13/cobra"
)

func command(
	services []Service,
) *cobra.Command {
	return &cobra.Command{
		Use: "graphql flamingo module",
		RunE: func(cmd *cobra.Command, args []string) error {
			cfg := config.DefaultConfig()
			cfg.SchemaFilename = []string{"graphql/schema.graphql"}
			cfg.Models = make(map[string]config.TypeMapEntry)

			if err := os.Mkdir("graphql", 0755); err != nil && !os.IsExist(err) {
				return err
			}

			if err := ioutil.WriteFile("graphql/schema.graphql", []byte(`type Query { flamingo: String }
scalar Time`), 0644); err != nil {
				return err
			}

			// language=go
			if err := ioutil.WriteFile("graphql/module.go", []byte(`// Code generated by flamingo.me/graphql, DO NOT EDIT.

package graphql

import (
	"flamingo.me/dingo"
	"github.com/99designs/gqlgen/graphql"
)

type Module struct{}

func (*Module) Configure(injector *dingo.Injector) {
	injector.Bind(new(graphql.ExecutableSchema)).ToProvider(func(root *rootResolver) graphql.ExecutableSchema {
		return NewExecutableSchema(Config{Resolvers: root})
	})
}
`), 0644); err != nil {
				return err
			}

			if _, err := os.Stat("graphql/resolver.go"); os.IsNotExist(err) {
				// language=go
				if err := ioutil.WriteFile("graphql/resolver.go", []byte(`package graphql

// this file is a starting point for the project specific resolvers
// it will not be regenerated!

type rootResolver  struct{}

var _ ResolverRoot = new(rootResolver)

func (*rootResolver) Query() QueryResolver {
	return nil
}

type queryResolver struct{}
`), 0644); err != nil {
					return err
				}
			}

			for _, service := range services {
				rt := reflect.TypeOf(service).Elem()
				fname := strings.Replace(rt.PkgPath(), "/", "_", -1) + "-" + rt.Name() + ".graphql"
				log.Printf("Writing %s", fname)
				if err := ioutil.WriteFile("graphql/"+fname, service.Schema(), 0644); err != nil {
					return err
				}
				cfg.SchemaFilename = append(cfg.SchemaFilename, "graphql/"+fname)

				// merge models into config models
				for k, v := range service.Models() {
					cfg.Models[k] = v
				}
			}

			cfg.Model = config.PackageConfig{Filename: "graphql/models_gen.go"}
			cfg.Exec = config.PackageConfig{Filename: "graphql/generated.go"}

			return api.Generate(cfg)
		},
	}
}
